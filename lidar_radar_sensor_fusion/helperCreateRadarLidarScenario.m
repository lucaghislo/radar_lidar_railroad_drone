function [scenario, egoVehicle, radarSensors, lidarSensor] = helperCreateRadarLidarScenario
    [scenario, egoVehicle] = createScenario;
    
    sensors = createSensors(scenario);
    
    isRadar = cellfun(@(x)isa(x,'drivingRadarDataGenerator'),sensors);

    radarSensors = sensors(isRadar);
    lidarSensor = sensors{~isRadar};
end

function sensors = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
hasRR = true;
hasFA = true;
hasNoise = true;
hasOcclusion = false;
Pfa = 1e-6;

sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.7 0 0.6], ...
    'MountingAngles', [0 0 0],...
    'RangeLimits', [0 80], ...
    'DetectionProbability', 0.9, ...
    'AzimuthResolution', 6, ...
    'RangeResolution',2.5,...
    'RangeRateResolution',1,...
    'FieldOfView', [45 5], ...
    'Profiles', profiles,...
    'HasRangeRate',hasRR,...
    'DetectionCoordinates', 'Sensor spherical',...
    'HasFalseAlarms',hasFA ,...
    'HasNoise',hasNoise, ...
    'HasOcclusion',hasOcclusion, ...
    'FalseAlarmRate',Pfa,...
    'TargetReportFormat','Detections'...
    );

sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [-1 0 0.6], ...
    'MountingAngles',[180 0 0],...
    'RangeLimits', [0 80], ...
    'DetectionProbability', 0.9, ...
    'AzimuthResolution', 6, ...
    'RangeResolution',2.5,...
    'RangeRateResolution',1,...
    'FieldOfView', [45 5], ...
    'Profiles', profiles,...
    'HasRangeRate',hasRR,...
    'DetectionCoordinates', 'Sensor spherical',...
    'HasFalseAlarms',hasFA ,...
    'HasNoise',hasNoise, ...
    'HasOcclusion',hasOcclusion, ...
    'FalseAlarmRate',Pfa, ...
    'TargetReportFormat','Detections'...
    );

sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'MountingLocation', [1.35 0.9 0.6], ...
    'MountingAngles', [90 0 0], ...
    'RangeLimits', [0 35], ...
    'DetectionProbability', 0.9, ...
    'AzimuthResolution', 6, ...
    'RangeResolution',2.5,...
    'FieldOfView', [150 5], ...
    'Profiles', profiles,...
    'HasRangeRate',hasRR,...
    'DetectionCoordinates', 'Sensor spherical',...
    'HasFalseAlarms',hasFA,...
    'HasNoise',hasNoise,...
    'HasOcclusion', hasOcclusion,...
    'FalseAlarmRate',Pfa,...
    'TargetReportFormat','Detections');

sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [1.35 -0.9 0.6],...
    'MountingAngles', [-90 0 0], ...
    'RangeLimits', [0 35], ...
    'DetectionProbability', 0.9, ...
    'AzimuthResolution', 6, ...
    'RangeResolution',2.5,...
    'FieldOfView', [150 5], ...
    'Profiles', profiles,...
    'HasRangeRate',hasRR,...
    'DetectionCoordinates','Sensor spherical',...
    'HasFalseAlarms',hasFA,...
    'HasNoise',hasNoise,...
    'HasOcclusion',hasOcclusion,...
    'FalseAlarmRate',Pfa,...
    'TargetReportFormat','Detections');

sensors{5} = lidarPointCloudGenerator('SensorIndex',5,...
    'SensorLocation',[0 0],...
    'ElevationLimits',[-30 10],...
    'Pitch',0,...
    'Height',2,...
    'AzimuthResolution', 0.2,...
    'ElevationResolution', 1.25,...
    'MaxRange', 120,...
    'ActorProfiles', profiles,...
    'DetectionCoordinates','Ego Cartesian',...
    'HasOrganizedOutput',false,...
    'HasEgoVehicle',false);

end

function [scenario, egoCar] = createScenario

scenario = drivingScenario;
scenario.SampleTime = 0.1;

roadCenters = [0 0; 50 0; 100 0; 250 20; 400 35];
road(scenario, roadCenters, 'lanes',lanespec(3));

egoCar = vehicle(scenario, 'ClassID', 1);
trajectory(egoCar, roadCenters(2:end,:) - [0 0], 25); % On right lane
egoCar.Mesh = driving.scenario.carMesh;

truck = vehicle(scenario, 'ClassID', 1, 'Length', 8.1, 'Width', 2.45, 'Height',3.5);
trajectory(truck, [80 0;roadCenters(3:end,:)] + [0 -3.6], 25);
truck.Mesh = driving.scenario.truckMesh;

passingCar = vehicle(scenario, 'ClassID', 1, 'Length', 4.7, 'Width', 1.8, 'Height', 1.4);
waypoints = [0 0; 50 1.8; 100 1.8; 250 21.8; 400 36.8] + [0 1.8];
trajectory(passingCar, waypoints, 35);
passingCar.Mesh = driving.scenario.carMesh;

chaseCar = vehicle(scenario, 'ClassID', 1, 'Length', 4.7, 'Width', 1.8, 'Height', 1.4);
trajectory(chaseCar, [30 0;50 0;100 0;250 20;330 32.7;400 38.7], 25);
chaseCar.Mesh = driving.scenario.carMesh;

followCar = vehicle(scenario, 'ClassID', 1, 'Length', 4.7, 'Width', 1.8, 'Height', 1.4);
trajectory(followCar, [70 0; roadCenters(3:end,:)] - [0 0], 25);
followCar.Mesh = driving.scenario.carMesh;

end